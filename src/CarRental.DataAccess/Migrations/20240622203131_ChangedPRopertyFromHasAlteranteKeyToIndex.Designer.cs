// <auto-generated />
using System;
using CarRental.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.DataAccess.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    [Migration("20240622203131_ChangedPRopertyFromHasAlteranteKeyToIndex")]
    partial class ChangedPRopertyFromHasAlteranteKeyToIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Finnish_Swedish_100_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRental.Domains.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickUpDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CarRental.Domains.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Category");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CarRental.Domains.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternatePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("EmailAddress");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ContactInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Spånga",
                            CustomerId = 1,
                            EmailAddress = "sinan.altaii@live.se",
                            PhoneNumber = "0730323252",
                            PostalCode = "163 67",
                            StreetAddress = "Skäftingebacken 21 LGH 1303"
                        });
                });

            modelBuilder.Entity("CarRental.Domains.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalIdentityNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalIdentityNumber")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfoId = 1,
                            FirstName = "Sinan",
                            LastName = "Altaii",
                            PersonalIdentityNumber = "19851223-8273"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jon",
                            LastName = "Doe",
                            PersonalIdentityNumber = "19880101-9090"
                        });
                });

            modelBuilder.Entity("CarRental.Domains.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MileageReading")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "Skoda",
                            MileageReading = 0,
                            Model = "Octavia",
                            PlateNumber = "OUH283"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "Renault",
                            MileageReading = 0,
                            Model = "Clio",
                            PlateNumber = "REN-323"
                        });
                });

            modelBuilder.Entity("CarRental.Domains.CategoryPriced", b =>
                {
                    b.HasBaseType("CarRental.Domains.Category");

                    b.Property<decimal>("AdditionalFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BaseKmPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("CategoryPriced");
                });

            modelBuilder.Entity("CarRental.Domains.SmallCar", b =>
                {
                    b.HasBaseType("CarRental.Domains.Category");

                    b.HasDiscriminator().HasValue("SmallCar");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BasePrice = 0m,
                            Name = "SmallCar"
                        });
                });

            modelBuilder.Entity("CarRental.Domains.Uncategorized", b =>
                {
                    b.HasBaseType("CarRental.Domains.Category");

                    b.HasDiscriminator().HasValue("Uncategorized");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 0m,
                            Name = "Uncategorized"
                        });
                });

            modelBuilder.Entity("CarRental.Domains.CategoryFee", b =>
                {
                    b.HasBaseType("CarRental.Domains.CategoryPriced");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("CategoryFee");
                });

            modelBuilder.Entity("CarRental.Domains.StationWagon", b =>
                {
                    b.HasBaseType("CarRental.Domains.CategoryPriced");

                    b.HasDiscriminator().HasValue("StationWagon");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            BasePrice = 100.00m,
                            Name = "StationWagon",
                            AdditionalFee = 1.30m,
                            BaseKmPrice = 0.50m
                        });
                });

            modelBuilder.Entity("CarRental.Domains.Truck", b =>
                {
                    b.HasBaseType("CarRental.Domains.CategoryFee");

                    b.HasDiscriminator().HasValue("Truck");
                });

            modelBuilder.Entity("CarRental.Domains.Booking", b =>
                {
                    b.HasOne("CarRental.Domains.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domains.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domains.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarRental.Domains.ContactInfo", b =>
                {
                    b.HasOne("CarRental.Domains.Customer", "Customer")
                        .WithOne("ContactInfo")
                        .HasForeignKey("CarRental.Domains.ContactInfo", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarRental.Domains.Vehicle", b =>
                {
                    b.HasOne("CarRental.Domains.Category", "Category")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CarRental.Domains.Category", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarRental.Domains.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ContactInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
